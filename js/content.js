(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.pv_content = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var I, log, m271,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  log = require('../log');

  I = require('./I');

  m271 = (function(superClass) {
    extend(m271, superClass);

    function m271() {
      return m271.__super__.constructor.apply(this, arguments);
    }

    m271.prototype.init = function() {
      this.site = '271';
      this._p = window.flash;
      return log.c('c_m/271: init done. ');
    };

    m271.prototype.get_info = function() {
      var o, pi, vi;
      o = m271.__super__.get_info.call(this);
      vi = this._video_info();
      pi = this._player_info();
      o.title_video = vi.vn;
      o.title_sub = vi.subt;
      o.size = pi.width + "x" + pi.height;
      o.max_time_s = pi.totalDuration / 1e3;
      return o;
    };

    m271.prototype.get_time = function() {
      var pi;
      pi = this._player_info();
      return pi.currentTime / 1e3;
    };

    m271.prototype.set_time = function(time_s) {
      return this._player_seek(time_s);
    };

    m271.prototype.pause = function() {
      return this._player_pause();
    };

    m271.prototype._video_info = function() {
      return JSON.parse(this._p['getQiyiVideoInfo']());
    };

    m271.prototype._player_info = function() {
      return JSON.parse(this._p['getQiyiPlayerInfo']());
    };

    m271.prototype._player_log = function() {
      return this._p['getQiyiPlayerLog']();
    };

    m271.prototype._player_seek = function(time_s) {
      return this._p['seekQiyiVideo'](time_s);
    };

    m271.prototype._player_pause = function() {
      return this._p['pauseQiyiVideo']();
    };

    return m271;

  })(I);

  module.exports = m271;

}).call(this);



},{"../log":7,"./I":2}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var I;

  I = (function() {
    function I() {
      this.site = '#unknow';
      return;
    }

    I.prototype.init = function() {};

    I.prototype.get_info = function() {
      return {
        site: this.site,
        url: document.URL,
        title: $('title').text(),
        title_video: '#video_title',
        title_sub: '#sub_title',
        size: '#unknow_size',
        max_time_s: '#unknow_max_time_s'
      };
    };

    I.prototype.set_time = function(time_s) {};

    I.prototype.get_time = function() {
      return -1;
    };

    I.prototype.pause = function() {};

    return I;

  })();

  module.exports = I;

}).call(this);



},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var I, log, m_vqq,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  log = require('../log');

  I = require('./I');

  m_vqq = (function(superClass) {
    extend(m_vqq, superClass);

    function m_vqq() {
      return m_vqq.__super__.constructor.apply(this, arguments);
    }

    m_vqq.prototype.init = function() {
      this.site = 'vqq';
      return log.c('c_m/vqq: init done. ');
    };

    m_vqq.prototype.get_info = function() {
      var o;
      o = m_vqq.__super__.get_info.call(this);
      return o;
    };

    m_vqq.prototype.get_time = function() {};

    m_vqq.prototype.set_time = function(time_s) {};

    m_vqq.prototype.pause = function() {};

    return m_vqq;

  })(I);

  module.exports = m_vqq;

}).call(this);



},{"../log":7,"./I":2}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var I, log, m_youku,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  log = require('../log');

  I = require('./I');

  m_youku = (function(superClass) {
    extend(m_youku, superClass);

    function m_youku() {
      return m_youku.__super__.constructor.apply(this, arguments);
    }

    m_youku.prototype.init = function() {
      this.site = 'youku';
      return log.c('c_m/youku: init done. ');
    };

    m_youku.prototype.get_info = function() {
      var o;
      o = m_youku.__super__.get_info.call(this);
      return o;
    };

    m_youku.prototype.get_time = function() {};

    m_youku.prototype.set_time = function(time_s) {};

    m_youku.prototype.pause = function() {};

    return m_youku;

  })(I);

  module.exports = m_youku;

}).call(this);



},{"../log":7,"./I":2}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  module.exports = {
    check_init_max_wait_s: 20,
    check_video_play_count_s: 5,
    flush_delta_s: 60,
    flush_reserve_s: 120
  };

}).call(this);



},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var check_list, check_playing, check_site_support, config, content_init, etc, init_msg, log, m271, m_vqq, m_youku, msg, start_check;

  log = require('./log');

  msg = require('./msg');

  config = require('./config');

  m271 = require('./c_m/271');

  m_vqq = require('./c_m/vqq');

  m_youku = require('./c_m/youku');

  check_list = {
    '271': function() {
      var e;
      try {
        window.flash['getQiyiPlayerInfo']();
        return m271;
      } catch (error) {
        e = error;
        return false;
      }
    },
    'vqq': function() {
      var e, i;
      try {
        i = $('object', $('#tenvideo_player')).attr('id');
        window[i]['getFPInfo']();
        return m_vqq;
      } catch (error) {
        e = error;
        return false;
      }
    },
    'youku': function() {
      var e;
      try {
        window.movie_player['getPlayerState']();
        return m_youku;
      } catch (error) {
        e = error;
        return false;
      }
    }
  };

  etc = {
    m_worker: null
  };

  check_site_support = function() {
    var Worker, i;
    for (i in check_list) {
      log.c("checking " + i + " .. . ");
      Worker = check_list[i]();
      if (Worker !== false) {
        log.c("[ OK ] yes! this is " + i + " ;-) ");
        setTimeout(function() {
          return msg.send(msg.t.found, {
            site: etc.m_worker.site,
            url: document.URL,
            title: $('title').text()
          });
        }, 0);
        etc.m_worker = new Worker();
        etc.m_worker.init();
        check_playing();
        return true;
      }
    }
    return false;
  };

  start_check = function() {
    var _check, check_max_s, count;
    count = {
      i: 0
    };
    check_max_s = config.check_init_max_wait_s;
    _check = function() {
      var result;
      result = check_site_support();
      if (result) {
        return log.c("found supported site (page) after " + count.i + "s");
      } else {
        count.i += 1;
        if (count.i > check_max_s) {
          return log.c("give up, check support after " + count.i + "s");
        } else {
          return setTimeout(_check, 1e3);
        }
      }
    };
    log.c('start check page (site support)');
    return setTimeout(_check, 0);
  };

  check_playing = function() {
    var _check_play, count, count_max, w;
    count = {
      i: 0,
      old: null
    };
    count_max = config.check_video_play_count_s;
    w = etc.m_worker;
    _check_play = function() {
      var now;
      now = w.get_time();
      if (now !== count.old) {
        count.i += 1;
      } else {
        count.i = 0;
      }
      count.old = now;
      if (count.i > count_max) {
        log.c("video is now playing .. . (" + count_max + "s)");
        return msg.send(msg.t.playing, w.get_info());
      } else {
        return setTimeout(_check_play, 1e3);
      }
    };
    log.c('start check video playing .. . ');
    return setTimeout(_check_play, 0);
  };

  init_msg = function() {
    return msg.on(function(info) {
      log.c("DEBUG: got msg, type == " + info.type + ", data == " + (JSON.stringify(info.data)) + " ");
      switch (info.type) {
        case msg.t.check_support:
          log.c('check_support, again');
          return start_check();
        case msg.t.get_info:
          return info.callback(etc.m_worker.get_info());
        case msg.t.set_time:
          return setTimeout(function() {
            var s;
            s = info.data.time_s;
            log.c("set_time, s == " + s + " ");
            etc.m_worker.set_time(s);
            if (info.data.pause) {
              return etc.m_worker.pause();
            }
          }, 0);
        default:
          return log.c("FIXME: unknow msg, type == " + info.type + " ");
      }
    });
  };

  content_init = function() {
    init_msg();
    return start_check();
  };

  content_init();

}).call(this);



},{"./c_m/271":1,"./c_m/vqq":3,"./c_m/youku":4,"./config":5,"./log":7,"./msg":8}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var log_p;

  log_p = function(text) {
    return console.log(module.exports.prefix + text);
  };

  module.exports = {
    prefix: 'parse_v-crx: ',
    d: function(text) {
      return log_p('DEBUG: ' + text);
    },
    c: function(text) {
      return log_p('content script: ' + text);
    }
  };

}).call(this);



},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var msg_type_check_support, msg_type_flush_done, msg_type_found, msg_type_get_all, msg_type_get_info, msg_type_get_one_file, msg_type_get_state, msg_type_playing, msg_type_set_time, msg_type_start_flush, msg_version, parse_v_mark, send_msg, send_to_content, set_on_msg;

  parse_v_mark = 'uuid=ec9680e6-da5e-4971-ac5f-25d971bf6366';

  msg_version = '0.1.0-1';

  msg_type_found = 'content_found';

  msg_type_playing = 'content_playing';

  msg_type_get_info = 'content_get_info';

  msg_type_check_support = 'content_check_support';

  msg_type_set_time = 'content_set_time';

  msg_type_get_state = 'popup_get_state';

  msg_type_start_flush = 'popup_start_flush';

  msg_type_flush_done = 'popup_flush_done';

  msg_type_get_all = 'dl_get_all';

  msg_type_get_one_file = 'dl_get_one_file';

  set_on_msg = function(callback) {
    return chrome.runtime.onMessage.addListener(function(msg, sender, send_res) {
      var e;
      try {
        if (!((msg.mark === parse_v_mark) && (msg.version === msg_version))) {
          return;
        }
      } catch (error) {
        e = error;
        return;
      }
      callback({
        mark: msg.mark,
        version: msg.version,
        type: msg.type,
        data: msg.data,
        sender: sender,
        callback: send_res
      });
      return true;
    });
  };

  send_msg = function(msg_type, data, callback) {
    var msg;
    msg = {
      mark: parse_v_mark,
      version: msg_version,
      type: msg_type,
      data: data
    };
    return chrome.runtime.sendMessage(null, msg, callback);
  };

  send_to_content = function(msg_type, data, callback, tab_id) {
    var msg;
    msg = {
      mark: parse_v_mark,
      version: msg_version,
      type: msg_type,
      data: data
    };
    return chrome.tabs.sendMessage(tab_id, msg, callback);
  };

  module.exports = {
    mark: parse_v_mark,
    version: msg_version,
    t: {
      found: msg_type_found,
      playing: msg_type_playing,
      get_info: msg_type_get_info,
      check_support: msg_type_check_support,
      set_time: msg_type_set_time,
      get_state: msg_type_get_state,
      start_flush: msg_type_start_flush,
      flush_done: msg_type_flush_done,
      get_all: msg_type_get_all,
      get_one_file: msg_type_get_one_file
    },
    on: set_on_msg,
    send: send_msg,
    send_to_content: send_to_content
  };

}).call(this);



},{}]},{},[6])(6)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
