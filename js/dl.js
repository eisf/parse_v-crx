(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.pv_dl = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var download_text, log, second_to_time;

  log = require('../log');

  second_to_time = function(s) {
    var h, m, ns, o;
    ns = function(n) {
      if (n < 10) {
        return '0' + n;
      } else {
        return '' + n;
      }
    };
    m = Math.floor(s / 60);
    s = s - m * 60;
    h = Math.floor(m / 60);
    m = m - h * 60;
    s = Math.floor(s);
    o = (ns(m)) + ":" + (ns(s));
    if (h > 0) {
      o = (ns(h)) + ":" + o;
    }
    return o;
  };

  download_text = function(filename, text) {
    var b, file_url;
    b = new Blob([text], {
      type: 'text/plain'
    });
    file_url = URL.createObjectURL(b);
    return chrome.downloads.download({
      url: file_url,
      filename: filename,
      conflictAction: 'uniquify'
    }, function(download_id) {
      return log.d("bg/util: download_text: id " + download_id + ", filename " + filename + ", URL " + file_url);
    });
  };

  module.exports = {
    second_to_time: second_to_time,
    download_text: download_text
  };

}).call(this);



},{"../log":4}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  module.exports = {
    check_init_max_wait_s: 20,
    check_video_play_count_s: 5,
    flush_delta_s: 60,
    flush_reserve_s: 120,
    flush_wait_s: 1,
    auto_flush_reserve_s: 5,
    merge_ffmpeg_bin: 'ffmpeg',
    dl_prefix: 'parse_v-crx-dl'
  };

}).call(this);



},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var config, create_dl_ui, create_get_addr_ui, dl_init, get_all_info, log, merge, msg, render_one_tab, render_page;

  log = require('./log');

  msg = require('./msg');

  config = require('./config');

  merge = require('./p_dl/merge');

  get_all_info = function() {
    return msg.send(msg.t.get_all, null, function(info) {
      log.d("dl: get_all: result = " + (JSON.stringify(info)));
      return render_page(info);
    });
  };

  render_page = function(info) {
    var div, i, results, v;
    if (info === null) {
      return;
    }
    $('#main_place_holder').remove();
    div = $('#dl_main_ui');
    results = [];
    for (i in info) {
      v = info[i];
      results.push(render_one_tab(i, v, div));
    }
    return results;
  };

  render_one_tab = function(tab_id, one, host) {
    var a, before, div, f, filename, h, i, j, len, li, ol, p, time_s;
    div = $("<div id=\"tab_id_" + tab_id + "\" ></div>");
    host.append(div);
    h = $('<h2></h2>');
    h.text("id " + tab_id + " : " + one.title);
    div.append(h);
    p = $('<p></p>');
    p.text("[" + one.site + "] " + one.url);
    div.append(p);
    h = $('<h3></h3>');
    h.text("视频: " + one.title_video + "_" + one.title_sub + " [ " + one.size + " ] 时长 " + (Math.round(one.max_time_s / 60)) + " 分钟 (" + one.max_time_s + " 秒) ");
    div.append(h);
    f = one.video[one.size].file;
    p = $('<p></p>');
    p.text("文件列表 (共 " + f.length + " 个分段)");
    div.append(p);
    ol = $('<ol></ol>');
    div.append(ol);
    for (j = 0, len = f.length; j < len; j++) {
      i = f[j];
      li = $('<li></li>');
      ol.append(li);
      time_s = i.time_s, before = i.before, filename = i.filename;
      p = $('<p></p>');
      p.text("[ " + (Math.round(time_s / 60)) + " 分钟 (" + time_s + " 秒) ] " + filename);
      li.append(p);
      a = $('<a></a>');
      a.text(before);
      a.attr('href', before);
      li.append(a);
    }
    create_get_addr_ui(div, one, tab_id);
    return create_dl_ui(div, one, tab_id);
  };

  create_dl_ui = function(div, info, tab_id) {
    var b, count, dl_dir_prefix, download_next, download_one_file, f, get_one_final_url, i_max, ll, pre, start_download;
    div.append($('<h3>简单下载功能</h3>'));
    b = $('<button type="button" >下载全部分段</button>');
    div.append(b);
    pre = $('<pre></pre>');
    div.append(pre);
    ll = function(text) {
      return pre.text(pre.text() + ':: ' + text + '\n');
    };
    dl_dir_prefix = config.dl_prefix;
    f = info.video[info.size].file;
    count = {
      i: 0
    };
    i_max = f.length;
    b.on('click', function() {
      ll("开始下载共 " + i_max + " 个文件 .. . ");
      merge.gen_merge_script(info, config.dl_prefix);
      return start_download();
    });
    start_download = function() {
      if (count.i >= i_max) {
        return ll("所有文件下载完毕 ! ");
      }
      ll("下载第 " + (count.i + 1) + " 个文件 ");
      return get_one_final_url(tab_id, f[count.i]);
    };
    get_one_final_url = function(tab_id, raw) {
      return msg.send(msg.t.get_one_file, {
        tab_id: tab_id,
        raw: raw
      }, function(result) {
        var file_path;
        log.d(" dl: get_one_final_url: result = " + (JSON.stringify(result)));
        file_path = dl_dir_prefix + '/' + raw.filename;
        return download_one_file(result.url, file_path);
      });
    };
    download_one_file = function(file_url, file_path) {
      return chrome.downloads.download({
        url: file_url,
        filename: file_path,
        conflictAction: 'uniquify'
      }, function(download_id) {
        ll("文件 " + file_path + " 已开始下载, 等待下载完成 .. . ");
        log.d("download start: id == " + info.id + ", file_path = " + file_path + ", url == " + file_url + " ");
        return chrome.downloads.onChanged.addListener(function(info) {
          if (info.id === download_id) {
            log.d("download changed: id == " + info.id + ", state == " + (JSON.stringify(info.state)) + " ");
            if ((info.state != null) && (info.state.current === 'complete')) {
              ll("[ OK ] 文件 " + file_path + " 下载完成 ! ");
              return download_next();
            }
          }
        });
      });
    };
    return download_next = function() {
      count.i += 1;
      return start_download();
    };
  };

  create_get_addr_ui = function(div, info, tab_id) {
    var b, count, d, f, get_next, get_one_final_url, i_max, start_get, t;
    b = $('<button type="button" >获取全部文件下载地址</button>');
    div.append(b);
    t = $('<textarea></textarea>');
    d = $('<div></div>');
    d.append(t);
    div.append(d);
    f = info.video[info.size].file;
    count = {
      i: 0,
      first_result: true
    };
    i_max = f.length;
    b.on('click', function() {
      t.text('正在获取 .. . ');
      return start_get();
    });
    start_get = function() {
      if (count.i < i_max) {
        return get_one_final_url(tab_id, f[count.i]);
      }
    };
    get_one_final_url = function(tab_id, raw) {
      return msg.send(msg.t.get_one_file, {
        tab_id: tab_id,
        raw: raw
      }, function(result) {
        log.d("dl: get_one_final_url: result = " + (JSON.stringify(result)));
        if (count.first_result) {
          count.first_result = false;
          t.text('');
        }
        t.text("" + (t.text()) + result.url + "\n");
        return get_next();
      });
    };
    return get_next = function() {
      count.i += 1;
      return start_get();
    };
  };

  dl_init = function() {
    log.d('dl: init ');
    return get_all_info();
  };

  dl_init();

}).call(this);



},{"./config":2,"./log":4,"./msg":5,"./p_dl/merge":7}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var log_p;

  log_p = function(text) {
    return console.log(module.exports.prefix + text);
  };

  module.exports = {
    prefix: 'parse_v-crx: ',
    d: function(text) {
      return log_p('DEBUG: ' + text);
    },
    c: function(text) {
      return log_p('content script: ' + text);
    }
  };

}).call(this);



},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var msg_type_check_support, msg_type_flush_done, msg_type_found, msg_type_get_all, msg_type_get_info, msg_type_get_one_file, msg_type_get_state, msg_type_playing, msg_type_popup_refresh, msg_type_set_time, msg_type_start_flush, msg_version, parse_v_mark, send_msg, send_to_content, set_on_msg;

  parse_v_mark = 'uuid=ec9680e6-da5e-4971-ac5f-25d971bf6366';

  msg_version = '0.1.0-1';

  msg_type_found = 'content_found';

  msg_type_playing = 'content_playing';

  msg_type_get_info = 'content_get_info';

  msg_type_check_support = 'content_check_support';

  msg_type_set_time = 'content_set_time';

  msg_type_get_state = 'popup_get_state';

  msg_type_start_flush = 'popup_start_flush';

  msg_type_flush_done = 'popup_flush_done';

  msg_type_popup_refresh = 'popup_refresh';

  msg_type_get_all = 'dl_get_all';

  msg_type_get_one_file = 'dl_get_one_file';

  set_on_msg = function(callback) {
    return chrome.runtime.onMessage.addListener(function(msg, sender, send_res) {
      var e;
      try {
        if (!((msg.mark === parse_v_mark) && (msg.version === msg_version))) {
          return;
        }
      } catch (error) {
        e = error;
        return;
      }
      return callback({
        mark: msg.mark,
        version: msg.version,
        type: msg.type,
        data: msg.data,
        sender: sender,
        callback: send_res
      });
    });
  };

  send_msg = function(msg_type, data, callback) {
    var msg;
    msg = {
      mark: parse_v_mark,
      version: msg_version,
      type: msg_type,
      data: data
    };
    return chrome.runtime.sendMessage(null, msg, callback);
  };

  send_to_content = function(msg_type, data, callback, tab_id) {
    var msg;
    msg = {
      mark: parse_v_mark,
      version: msg_version,
      type: msg_type,
      data: data
    };
    return chrome.tabs.sendMessage(tab_id, msg, callback);
  };

  module.exports = {
    mark: parse_v_mark,
    version: msg_version,
    t: {
      found: msg_type_found,
      playing: msg_type_playing,
      get_info: msg_type_get_info,
      check_support: msg_type_check_support,
      set_time: msg_type_set_time,
      get_state: msg_type_get_state,
      start_flush: msg_type_start_flush,
      flush_done: msg_type_flush_done,
      popup_refresh: msg_type_popup_refresh,
      get_all: msg_type_get_all,
      get_one_file: msg_type_get_one_file
    },
    on: set_on_msg,
    send: send_msg,
    send_to_content: send_to_content
  };

}).call(this);



},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var config, make_ffmpeg_merge_sh;

  config = require('../config');

  make_ffmpeg_merge_sh = function(file_list, output_file, sh_filename) {
    var ffmpeg, o, output;
    output = [];
    o = function(line) {
      return output.push(line);
    };
    o('@echo on');
    o('chcp 65001');
    o('');
    ffmpeg = config.merge_ffmpeg_bin;
    o(ffmpeg + " -i \"concat:" + (file_list.join('|')) + "\" -c copy " + output_file);
    o('');
    o('pause');
    o('cmd');
    o('');
    o(":: end " + sh_filename + ": ffmpeg merge bat, generated by parse_v-crx at " + (new Date()));
    o('');
    return output.join('\r\n') + '\r\n';
  };

  module.exports = make_ffmpeg_merge_sh;

}).call(this);



},{"../config":2}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var gen_merge_script, log, merge_bat, merge_sh, util;

  log = require('../log');

  util = require('../bg/util');

  merge_sh = require('./merge.sh');

  merge_bat = require('./merge.bat');

  gen_merge_script = function(info, prefix) {
    var file_list, i, main_name, output_file, raw_list;
    raw_list = info.video[info.size].file;
    main_name = raw_list[0].filename.split('.')[0];
    file_list = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = raw_list.length; j < len; j++) {
        i = raw_list[j];
        results.push(i.filename);
      }
      return results;
    })();
    output_file = main_name + ".out.mp4";
    return chrome.runtime.getPlatformInfo(function(p) {
      var make_merge, script_name, script_text;
      log.d("p_dl/merge: os " + p.os);
      if (p.os === 'win') {
        script_name = "合并." + main_name + ".parse_v-crx.bat";
        make_merge = merge_bat;
      } else {
        script_name = "merge." + main_name + ".parse_v-crx.sh";
        make_merge = merge_sh;
      }
      script_text = make_merge(file_list, output_file, script_name);
      util.download_text(prefix + '/' + script_name, script_text);
      return log.d("p_dl/merge: gen_merge_script: done. " + script_name);
    });
  };

  module.exports = {
    gen_merge_script: gen_merge_script
  };

}).call(this);



},{"../bg/util":1,"../log":4,"./merge.bat":6,"./merge.sh":8}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.12.3
(function() {
  var config, make_ffmpeg_merge_sh;

  config = require('../config');

  make_ffmpeg_merge_sh = function(file_list, output_file, sh_filename) {
    var ffmpeg, i, j, len, o, output;
    output = [];
    o = function(line) {
      return output.push(line);
    };
    o('#!/bin/sh');
    o("# " + sh_filename + ": ffmpeg merge sh, generated by parse_v-crx at " + (new Date()));
    o('');
    o('file_list="\\');
    for (j = 0, len = file_list.length; j < len; j++) {
      i = file_list[j];
      o(i + "\\");
      o('|\\');
    }
    output.pop();
    o('"');
    o("output_file=\"" + output_file + "\"");
    o('');
    ffmpeg = config.merge_ffmpeg_bin;
    o("echo \"-> " + ffmpeg + " -i \\\"concat:${file_list}\\\" -c copy ${output_file}\"");
    o(ffmpeg + " -i \"concat:${file_list}\" -c copy ${output_file}");
    o('');
    o("# end " + sh_filename);
    o('');
    return output.join('\n') + '\n';
  };

  module.exports = make_ffmpeg_merge_sh;

}).call(this);



},{"../config":2}]},{},[3])(3)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
