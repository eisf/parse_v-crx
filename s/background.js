// Generated by CoffeeScript 1.12.3
(function() {
  var bg_init, config, disable_tab, enable_tab, enable_tab_list, log, m271, msg, on_msg, on_navigation, on_request, on_tab_change, on_tab_close, start_flush;

  log = require('./log');

  msg = require('./msg');

  config = require('./config');

  m271 = require('./b_e/271');

  enable_tab_list = new Map();

  on_msg = function(info) {
    var i, raw, ref, ref1, result, tab_id, w;
    log.d("background: got msg, type == " + info.type + ", data == " + (JSON.stringify(info.data)) + " ");
    switch (info.type) {
      case msg.t.found:
        tab_id = info.sender.tab.id;
        return enable_tab(tab_id, info.data);
      case msg.t.playing:
        tab_id = info.sender.tab.id;
        return enable_tab_list.get(tab_id).set_info(info.data);
      case msg.t.get_state:
        tab_id = info.data.tab_id;
        if (!enable_tab_list.has(tab_id)) {
          return info.callback(null);
        }
        result = enable_tab_list.get(tab_id).get_info();
        return info.callback(result);
      case msg.t.start_flush:
        return start_flush(info.data.tab_id);
      case msg.t.get_all:
        result = {};
        ref = enable_tab_list.keys();
        for (i of ref) {
          try {
            w = enable_tab_list.get(i);
            result[i] = w.get_info();
          } catch (error) {}
        }
        return info.callback(result);
      case msg.t.get_one_file:
        ref1 = info.data, tab_id = ref1.tab_id, raw = ref1.raw;
        tab_id = Number.parseInt(tab_id);
        if (!enable_tab_list.has(tab_id)) {
          log.d("background: get_one_file: no tab_id == " + tab_id);
          return info.callback(null);
        }
        w = enable_tab_list.get(tab_id);
        return w.get_url(raw).then(function(result) {
          log.d("FIXME: background: get_one_file: result = " + (JSON.stringify(result)));
          return info.callback(result);
        });
      default:
        return log.d("background: unknow msg: type == " + info.type + " ");
    }
  };

  on_tab_change = function(tab_id, info, tab) {};

  on_tab_close = function(tab_id, info) {
    return;
    log.d("background: disable_tab: tab_close: tab_id == " + tab_id + " ");
    return disable_tab(tab_id);
  };

  on_navigation = function(info) {
    var frame_id, new_url, old_url, tab_id;
    tab_id = info.tabId;
    if (!enable_tab_list.has(tab_id)) {
      return;
    }
    frame_id = info.frameId;
    if (frame_id !== 0) {
      return;
    }
    new_url = info.url;
    old_url = enable_tab_list.get(tab_id).url;
    log.d("navigation: old_url == " + old_url + ", new_url == " + new_url);
    if (old_url === new_url) {
      return log.d("background: navigation with same URL, tab_id == " + tab_id + ", URL == " + old_url);
    } else {
      return disable_tab(tab_id);
    }
  };

  enable_tab = function(tab_id, info) {
    var w;
    enable_tab_list.set(tab_id, info);
    chrome.pageAction.show(tab_id);
    log.d("background: enable tab, id == " + tab_id + ", site == " + info.site + " ");
    switch (info.site) {
      case '271':
        w = new m271(info);
        w.init();
        return enable_tab_list.set(tab_id, w);
    }
  };

  disable_tab = function(tab_id) {
    var worker;
    if (!enable_tab_list.has(tab_id)) {
      return;
    }
    msg.send_to_content(msg.t.check_support, null, null, tab_id);
    worker = enable_tab_list.get(tab_id);
    enable_tab_list["delete"](tab_id);
    log.d("background: disable tab, id == " + tab_id);
    if (typeof worker.cleanup === "function") {
      worker.cleanup();
    }
    return chrome.pageAction.hide(tab_id);
  };

  start_flush = function(tab_id) {
    var delta, i, j, max_s, ref, ref1, reserve, w;
    if (!enable_tab_list.has(tab_id)) {
      return;
    }
    w = enable_tab_list.get(tab_id);
    delta = config.flush_delta_s;
    reserve = config.flush_reserve_s;
    max_s = w.get_info().max_time_s;
    log.d("background: start flush, tab_id == " + tab_id + " ");
    for (i = j = 0, ref = max_s - reserve, ref1 = delta; ref1 > 0 ? j <= ref : j >= ref; i = j += ref1) {
      msg.send_to_content(msg.t.set_time, {
        time_s: i,
        pause: true
      }, null, tab_id);
    }
    log.d("background: flush done. ");
    return msg.send(msg.t.flush_done, null);
  };

  on_request = function(info) {
    var o, w;
    o = {
      req_id: info.requestId,
      url: info.url,
      method: info.method,
      tab_id: info.tabId,
      header: info.requestHeaders
    };
    if (enable_tab_list.has(o.tab_id)) {
      w = enable_tab_list.get(o.tab_id);
      return w.on_request(o);
    }
  };

  bg_init = function() {
    msg.on(on_msg);
    chrome.tabs.onRemoved.addListener(on_tab_close);
    chrome.tabs.onUpdated.addListener(on_tab_change);
    chrome.webNavigation.onCommitted.addListener(on_navigation);
    return chrome.webRequest.onSendHeaders.addListener(on_request, {
      urls: ['<all_urls>']
    });
  };

  log.d('background init .. . ');

  bg_init();

}).call(this);

//# sourceMappingURL=background.js.map
