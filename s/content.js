// Generated by CoffeeScript 1.12.3
(function() {
  var check_list, check_playing, check_site_support, config, content_init, etc, init_msg, log, m271, m_vqq, m_youku, msg, start_check;

  log = require('./log');

  msg = require('./msg');

  config = require('./config');

  m271 = require('./c_m/271');

  m_vqq = require('./c_m/vqq');

  m_youku = require('./c_m/youku');

  check_list = {
    '271': function() {
      var e;
      try {
        window.flash['getQiyiPlayerInfo']();
        return m271;
      } catch (error) {
        e = error;
        return false;
      }
    },
    'vqq': function() {
      var e, i;
      try {
        i = $('object', $('#tenvideo_player')).attr('id');
        window[i]['getFPInfo']();
        return m_vqq;
      } catch (error) {
        e = error;
        return false;
      }
    },
    'youku': function() {
      var e;
      try {
        window.movie_player['getPlayerState']();
        return m_youku;
      } catch (error) {
        e = error;
        return false;
      }
    }
  };

  etc = {
    m_worker: null
  };

  check_site_support = function() {
    var Worker, i;
    for (i in check_list) {
      log.c("checking " + i + " .. . ");
      Worker = check_list[i]();
      if (Worker !== false) {
        log.c("[ OK ] yes! this is " + i + " ;-) ");
        setTimeout(function() {
          return msg.send(msg.t.found, {
            site: etc.m_worker.site,
            url: document.URL,
            title: $('title').text()
          });
        }, 0);
        etc.m_worker = new Worker();
        etc.m_worker.init();
        check_playing();
        return true;
      }
    }
    return false;
  };

  start_check = function() {
    var _check, check_max_s, count;
    count = {
      i: 0
    };
    check_max_s = config.check_init_max_wait_s;
    _check = function() {
      var result;
      result = check_site_support();
      if (result) {
        return log.c("found supported site (page) after " + count.i + "s");
      } else {
        count.i += 1;
        if (count.i > check_max_s) {
          return log.c("give up, check support after " + count.i + "s");
        } else {
          return setTimeout(_check, 1e3);
        }
      }
    };
    log.c('start check page (site support)');
    return setTimeout(_check, 0);
  };

  check_playing = function() {
    var _check_play, count, count_max, w;
    count = {
      i: 0,
      old: null
    };
    count_max = config.check_video_play_count_s;
    w = etc.m_worker;
    _check_play = function() {
      var now;
      now = w.get_time();
      if (now !== count.old) {
        count.i += 1;
      } else {
        count.i = 0;
      }
      count.old = now;
      if (count.i > count_max) {
        log.c("video is now playing .. . (" + count_max + "s)");
        return msg.send(msg.t.playing, w.get_info());
      } else {
        return setTimeout(_check_play, 1e3);
      }
    };
    log.c('start check video playing .. . ');
    return setTimeout(_check_play, 0);
  };

  init_msg = function() {
    return msg.on(function(info) {
      log.c("DEBUG: got msg, type == " + info.type + ", data == " + (JSON.stringify(info.data)) + " ");
      switch (info.type) {
        case msg.t.check_support:
          log.c('check_support, again');
          return start_check();
        case msg.t.get_info:
          return info.callback(etc.m_worker.get_info());
        case msg.t.set_time:
          return setTimeout(function() {
            var s;
            s = info.data.time_s;
            log.c("set_time, s == " + s + " ");
            etc.m_worker.set_time(s);
            if (info.data.pause) {
              return etc.m_worker.pause();
            }
          }, 0);
        default:
          return log.c("FIXME: unknow msg, type == " + info.type + " ");
      }
    });
  };

  content_init = function() {
    init_msg();
    return start_check();
  };

  content_init();

}).call(this);

//# sourceMappingURL=content.js.map
