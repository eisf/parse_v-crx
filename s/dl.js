// Generated by CoffeeScript 1.12.3
(function() {
  var create_dl_ui, dl_init, get_all_info, log, msg, render_one_tab, render_page;

  log = require('./log');

  msg = require('./msg');

  get_all_info = function() {
    return msg.send(msg.t.get_all, null, function(info) {
      log.d("dl: get_all: result = " + (JSON.stringify(info)));
      return render_page(info);
    });
  };

  render_page = function(info) {
    var div, i, results, v;
    if (info === null) {
      return;
    }
    $('#main_place_holder').remove();
    div = $('#dl_main_ui');
    results = [];
    for (i in info) {
      v = info[i];
      results.push(render_one_tab(i, v, div));
    }
    return results;
  };

  render_one_tab = function(tab_id, one, host) {
    var a, before, div, f, filename, h, i, j, len, li, ol, p, time_s;
    div = $("<div id=\"tab_id_" + tab_id + "\" ></div>");
    host.append(div);
    h = $('<h2></h2>');
    h.text("id " + tab_id + " : " + one.title);
    div.append(h);
    p = $('<p></p>');
    p.text("[" + one.site + "] " + one.url);
    div.append(p);
    h = $('<h3></h3>');
    h.text("视频: " + one.title_video + "_" + one.title_sub + " [ " + one.size + " ] 时长 " + (Math.round(one.max_time_s / 60)) + " 分钟 (" + one.max_time_s + " 秒) ");
    div.append(h);
    f = one.video[one.size].file;
    p = $('<p></p>');
    p.text("文件列表 (共 " + f.length + " 个分段)");
    div.append(p);
    ol = $('<ol></ol>');
    div.append(ol);
    for (j = 0, len = f.length; j < len; j++) {
      i = f[j];
      li = $('<li></li>');
      ol.append(li);
      time_s = i.time_s, before = i.before, filename = i.filename;
      p = $('<p></p>');
      p.text("[ " + (Math.round(time_s / 60)) + " 分钟 (" + time_s + " 秒) ] " + filename);
      li.append(p);
      a = $('<a></a>');
      a.text(before);
      a.attr('href', before);
      li.append(a);
    }
    return create_dl_ui(div, one, tab_id);
  };

  create_dl_ui = function(div, info, tab_id) {
    var b, count, dl_dir_prefix, download_next, download_one_file, f, get_one_final_url, i_max, ll, pre, start_download;
    div.append($('<h3>简单下载功能</h3>'));
    b = $('<button type="button" >下载全部分段</button>');
    div.append(b);
    pre = $('<pre></pre>');
    div.append(pre);
    ll = function(text) {
      return pre.text(pre.text() + ':: ' + text + '\n');
    };
    dl_dir_prefix = 'parse_v-crx-dl';
    f = info.video[info.size].file;
    count = {
      i: 0
    };
    i_max = f.length;
    b.on('click', function() {
      ll("开始下载共 " + i_max + " 个文件 .. . ");
      return start_download();
    });
    start_download = function() {
      if (count.i >= i_max) {
        return ll("所有文件下载完毕 ! ");
      }
      ll("下载第 " + (count.i + 1) + " 个文件 ");
      return get_one_final_url(tab_id, f[count.i]);
    };
    get_one_final_url = function(tab_id, raw) {
      return msg.send(msg.t.get_one_file, {
        tab_id: tab_id,
        raw: raw
      }, function(result) {
        var file_path;
        log.d("FIXME: dl: get_one_final_url: result = " + (JSON.stringify(result)));
        file_path = dl_dir_prefix + '/' + raw.filename;
        return download_one_file(result.url, file_path);
      });
    };
    download_one_file = function(file_url, file_path) {
      return chrome.downloads.download({
        url: file_url,
        filename: file_path,
        conflictAction: 'uniquify'
      }, function(download_id) {
        ll("文件 " + file_path + " 已开始下载, 等待下载完成 .. . ");
        log.d("download start: id == " + info.id + ", file_path = " + file_path + ", url == " + file_url + " ");
        return chrome.downloads.onChanged.addListener(function(info) {
          if (info.id === download_id) {
            log.d("download changed: id == " + info.id + ", state == " + (JSON.stringify(info.state)) + " ");
            if ((info.state != null) && (info.state.current === 'complete')) {
              ll("[ OK ] 文件 " + file_path + " 下载完成 ! ");
              return download_next();
            }
          }
        });
      });
    };
    return download_next = function() {
      count.i += 1;
      return start_download();
    };
  };

  dl_init = function() {
    log.d('dl: init ');
    return get_all_info();
  };

  dl_init();

}).call(this);

//# sourceMappingURL=dl.js.map
